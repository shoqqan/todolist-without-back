{"version":3,"sources":["reportWebVitals.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","state/store.ts","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","AddItemForm","React","memo","props","console","log","_useState","useState","_useState2","_slicedToArray","title","setTitle","_useState3","_useState4","error","setError","addItem","trim","_jsxs","children","_jsx","TextField","variant","value","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","onTitleChangeHandler","newValue","changeTaskTitle","className","isDone","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","_initialState","_defineProperty","App","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","rootReducer","combineReducers","arguments","length","undefined","stateCopy","_objectSpread","newTasks","newTask","concat","_toConsumableArray","newTasksArray","copyState","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.49f571e3.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\nimport IconButton from '@mui/material/IconButton';\nimport { AddBox } from '@mui/icons-material';\n\ntype AddItemFormPropsType = {\n    addItem: (title: string) => void\n}\n\nexport const AddItemForm = React.memo(function (props: AddItemFormPropsType) {\n    console.log('AddItemForm called')\n\n    let [title, setTitle] = useState('')\n    let [error, setError] = useState<string | null>(null)\n\n    const addItem = () => {\n        if (title.trim() !== '') {\n            props.addItem(title);\n            setTitle('');\n        } else {\n            setError('Title is required');\n        }\n    }\n\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) {\n            setError(null);\n        }\n        if (e.charCode === 13) {\n            addItem();\n        }\n    }\n\n    return <div>\n        <TextField variant=\"outlined\"\n                   error={!!error}\n                   value={title}\n                   onChange={onChangeHandler}\n                   onKeyPress={onKeyPressHandler}\n                   label=\"Title\"\n                   helperText={error}\n        />\n        <IconButton color=\"primary\" onClick={addItem}>\n            <AddBox/>\n        </IconButton>\n    </div>\n})\n","import React, { ChangeEvent, useState } from 'react';\nimport TextField from '@mui/material/TextField';\n\ntype EditableSpanPropsType = {\n    value: string\n    onChange: (newValue: string) => void\n}\n\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\n    console.log('EditableSpan called');\n    let [editMode, setEditMode] = useState(false);\n    let [title, setTitle] = useState(props.value);\n\n    const activateEditMode = () => {\n        setEditMode(true);\n        setTitle(props.value);\n    }\n    const activateViewMode = () => {\n        setEditMode(false);\n        props.onChange(title);\n    }\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\n        setTitle(e.currentTarget.value)\n    }\n\n    return editMode\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\n});\n","import React, { ChangeEvent, useCallback } from 'react'\nimport { EditableSpan } from './components/EditableSpan'\nimport { Delete } from '@mui/icons-material';\nimport IconButton from '@mui/material/IconButton';\nimport Checkbox from '@mui/material/Checkbox';\nimport { TaskType } from './Todolist'\n\ntype TaskPropsType = {\n    task: TaskType\n    todolistId: string\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n}\nexport const Task = React.memo((props: TaskPropsType) => {\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\n\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let newIsDoneValue = e.currentTarget.checked\n        props.changeTaskStatus(props.task.id, newIsDoneValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    const onTitleChangeHandler = useCallback((newValue: string) => {\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\n    }, [props.task.id, props.todolistId]);\n\n    return <div key={props.task.id} className={props.task.isDone ? 'is-done' : ''}>\n        <Checkbox\n            checked={props.task.isDone}\n            color=\"primary\"\n            onChange={onChangeHandler}\n        />\n\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\n        <IconButton onClick={onClickHandler}>\n            <Delete/>\n        </IconButton>\n    </div>\n})\n","import React, { useCallback } from 'react'\nimport { AddItemForm } from './components/AddItemForm'\nimport { EditableSpan } from './components/EditableSpan'\nimport IconButton from '@mui/material/IconButton';\nimport Button from '@mui/material/Button';\nimport { Delete } from '@mui/icons-material';\nimport { Task } from './Task'\nimport { FilterValuesType } from './App';\n\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\ntype PropsType = {\n    id: string\n    title: string\n    tasks: Array<TaskType>\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\n    addTask: (title: string, todolistId: string) => void\n    changeTaskStatus: (id: string, isDone: boolean, todolistId: string) => void\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\n    removeTask: (taskId: string, todolistId: string) => void\n    removeTodolist: (id: string) => void\n    changeTodolistTitle: (id: string, newTitle: string) => void\n    filter: FilterValuesType\n\n}\n\nexport const Todolist = React.memo(function (props: PropsType) {\n    console.log('Todolist called')\n\n    const addTask = useCallback((title: string) => {\n        props.addTask(title, props.id)\n    }, [props.addTask, props.id])\n\n    const removeTodolist = () => {\n        props.removeTodolist(props.id)\n    }\n    const changeTodolistTitle = useCallback((title: string) => {\n        props.changeTodolistTitle(props.id, title)\n    }, [props.id, props.changeTodolistTitle])\n\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\n\n\n    let tasksForTodolist = props.tasks\n\n    if (props.filter === 'active') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === false)\n    }\n    if (props.filter === 'completed') {\n        tasksForTodolist = props.tasks.filter(t => t.isDone === true)\n    }\n\n    return <div>\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\n            <IconButton onClick={removeTodolist}>\n                <Delete/>\n            </IconButton>\n        </h3>\n        <AddItemForm addItem={addTask}/>\n        <div>\n            {\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\n                                                removeTask={props.removeTask}\n                                                changeTaskTitle={props.changeTaskTitle}\n                                                changeTaskStatus={props.changeTaskStatus}\n                />)\n            }\n        </div>\n        <div style={{paddingTop: '10px'}}>\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\n                    onClick={onAllClickHandler}\n                    color={'inherit'}\n            >All\n            </Button>\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\n                    onClick={onActiveClickHandler}\n                    color={'primary'}>Active\n            </Button>\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\n                    onClick={onCompletedClickHandler}\n                    color={'secondary'}>Completed\n            </Button>\n        </div>\n    </div>\n})\n\n\n","import { v1 } from 'uuid';\nimport { FilterValuesType, TodolistType } from '../App';\n\nexport type RemoveTodolistActionType = {\n    type: 'REMOVE-TODOLIST',\n    id: string\n}\nexport type AddTodolistActionType = {\n    type: 'ADD-TODOLIST',\n    title: string\n    todolistId: string\n}\nexport type ChangeTodolistTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string\n    title: string\n}\nexport type ChangeTodolistFilterActionType = {\n    type: 'CHANGE-TODOLIST-FILTER',\n    id: string\n    filter: FilterValuesType\n}\n\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType\n    | ChangeTodolistTitleActionType\n    | ChangeTodolistFilterActionType\n\nconst initialState: Array<TodolistType> = [\n    {id:'first',title:'What to do?🖊',filter:\"all\"},\n    {id:'second',title:'What to eat?🍕',filter:\"all\"}\n]\n\nexport const todolistsReducer = (state: Array<TodolistType> = initialState, action: ActionsType): Array<TodolistType> => {\n    switch (action.type) {\n        case 'REMOVE-TODOLIST': {\n            return state.filter(tl => tl.id !== action.id)\n        }\n        case 'ADD-TODOLIST': {\n            return [{\n                id: action.todolistId,\n                title: action.title,\n                filter: 'all'\n            }, ...state]\n        }\n        case 'CHANGE-TODOLIST-TITLE': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.title = action.title;\n            }\n            return [...state]\n        }\n        case 'CHANGE-TODOLIST-FILTER': {\n            const todolist = state.find(tl => tl.id === action.id);\n            if (todolist) {\n                // если нашёлся - изменим ему заголовок\n                todolist.filter = action.filter;\n            }\n            return [...state]\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string): RemoveTodolistActionType => {\n    return {type: 'REMOVE-TODOLIST', id: todolistId}\n}\nexport const addTodolistAC = (title: string): AddTodolistActionType => {\n    return {type: 'ADD-TODOLIST', title: title, todolistId: v1()}\n}\nexport const changeTodolistTitleAC = (id: string, title: string): ChangeTodolistTitleActionType => {\n    return {type: 'CHANGE-TODOLIST-TITLE', id: id, title: title}\n}\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType): ChangeTodolistFilterActionType => {\n    return {type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter}\n}\n\n","import { TaskType } from '../Todolist';\nimport { v1 } from 'uuid';\nimport { AddTodolistActionType, RemoveTodolistActionType } from './todolists-reducer';\nimport { TasksStateType } from '../App';\n\nexport type RemoveTaskActionType = {\n    type: 'REMOVE-TASK',\n    todolistId: string\n    taskId: string\n}\n\nexport type AddTaskActionType = {\n    type: 'ADD-TASK',\n    todolistId: string\n    title: string\n}\n\nexport type ChangeTaskStatusActionType = {\n    type: 'CHANGE-TASK-STATUS',\n    todolistId: string\n    taskId: string\n    isDone: boolean\n}\n\nexport type ChangeTaskTitleActionType = {\n    type: 'CHANGE-TASK-TITLE',\n    todolistId: string\n    taskId: string\n    title: string\n}\n\ntype ActionsType = RemoveTaskActionType | AddTaskActionType\n    | ChangeTaskStatusActionType\n    | ChangeTaskTitleActionType\n    | AddTodolistActionType\n    | RemoveTodolistActionType\n\nconst initialState: TasksStateType = {\n    ['first']:[\n        {id:'lol',title:\"Study\",isDone:true},\n        {id:'lol1',title:\"Create Web-Site\",isDone:false},\n        {id:'lol2',title:\"Hangout with friends\",isDone:false}\n\n    ],\n    ['second']:[\n        {id:'lol3',title:\"Eags\",isDone:false},\n        {id:'lol4',title:\"Banana\",isDone:false},\n\n    ]\n}\n\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\n    switch (action.type) {\n        case 'REMOVE-TASK': {\n            const stateCopy = {...state}\n            const tasks = stateCopy[action.todolistId];\n            const newTasks = tasks.filter(t => t.id != action.taskId);\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'ADD-TASK': {\n            const stateCopy = {...state}\n            const newTask: TaskType = {\n                id: v1(),\n                title: action.title,\n                isDone: false\n            }\n            const tasks = stateCopy[action.todolistId];\n            const newTasks = [newTask, ...tasks];\n            stateCopy[action.todolistId] = newTasks;\n            return stateCopy;\n        }\n        case 'CHANGE-TASK-STATUS': {\n            let todolistTasks = state[action.todolistId];\n            let newTasksArray = todolistTasks\n                .map(t => t.id === action.taskId ? {...t, isDone: action.isDone} : t);\n\n            state[action.todolistId] = newTasksArray;\n            return ({...state});\n        }\n        case 'CHANGE-TASK-TITLE': {\n            let todolistTasks = state[action.todolistId];\n            // найдём нужную таску:\n            let newTasksArray = todolistTasks\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t);\n\n            state[action.todolistId] = newTasksArray;\n            return ({...state});\n        }\n        case 'ADD-TODOLIST': {\n            return {\n                ...state,\n                [action.todolistId]: []\n            }\n        }\n        case 'REMOVE-TODOLIST': {\n            const copyState = {...state};\n            delete copyState[action.id];\n            return copyState;\n        }\n        default:\n            return state;\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId}\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {type: 'ADD-TASK', title, todolistId}\n}\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\n    return {type: 'CHANGE-TASK-STATUS', isDone, todolistId, taskId}\n}\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {type: 'CHANGE-TASK-TITLE', title, todolistId, taskId}\n}\n\n","import React, { useCallback } from 'react'\nimport './App.css';\nimport { TaskType, Todolist } from './Todolist';\nimport { AddItemForm } from './components/AddItemForm';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport { Menu } from '@mui/icons-material';\nimport {\n    addTodolistAC,\n    changeTodolistFilterAC,\n    changeTodolistTitleAC,\n    removeTodolistAC\n} from './state/todolists-reducer';\nimport { addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC } from './state/tasks-reducer';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootStateType } from './state/store';\n\n\nexport type FilterValuesType = 'all' | 'active' | 'completed';\nexport type TodolistType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type TasksStateType = {\n    [key: string]: Array<TaskType>\n}\n\n\nfunction App() {\n\n    const todolists = useSelector<AppRootStateType, Array<TodolistType>>(state => state.todolists)\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\n    const dispatch = useDispatch();\n\n    const removeTask = useCallback(function (id: string, todolistId: string) {\n        const action = removeTaskAC(id, todolistId);\n        dispatch(action);\n    }, []);\n\n    const addTask = useCallback(function (title: string, todolistId: string) {\n        const action = addTaskAC(title, todolistId);\n        dispatch(action);\n    }, []);\n\n    const changeStatus = useCallback(function (id: string, isDone: boolean, todolistId: string) {\n        const action = changeTaskStatusAC(id, isDone, todolistId);\n        dispatch(action);\n    }, []);\n\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\n        dispatch(action);\n    }, []);\n\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\n        const action = changeTodolistFilterAC(todolistId, value);\n        dispatch(action);\n    }, []);\n\n    const removeTodolist = useCallback(function (id: string) {\n        const action = removeTodolistAC(id);\n        dispatch(action);\n    }, []);\n\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\n        const action = changeTodolistTitleAC(id, title);\n        dispatch(action);\n    }, []);\n\n    const addTodolist = useCallback((title: string) => {\n        const action = addTodolistAC(title);\n        dispatch(action);\n    }, [dispatch]);\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                        <Menu/>\n                    </IconButton>\n                    <Typography variant=\"h6\">\n                        Todolist\n                    </Typography>\n                </Toolbar>\n            </AppBar>\n            <Container fixed>\n                <Grid container style={{padding: '20px'}}>\n                    <AddItemForm addItem={addTodolist}/>\n                </Grid>\n                <Grid container spacing={3}>\n                    {\n                        todolists.map(tl => {\n                            let allTodolistTasks = tasks[tl.id];\n\n                            return <Grid item key={tl.id}>\n                                <Paper style={{padding: '10px'}}>\n                                    <Todolist\n                                        id={tl.id}\n                                        title={tl.title}\n                                        tasks={allTodolistTasks}\n                                        removeTask={removeTask}\n                                        changeFilter={changeFilter}\n                                        addTask={addTask}\n                                        changeTaskStatus={changeStatus}\n                                        filter={tl.filter}\n                                        removeTodolist={removeTodolist}\n                                        changeTaskTitle={changeTaskTitle}\n                                        changeTodolistTitle={changeTodolistTitle}\n                                    />\n                                </Paper>\n                            </Grid>\n                        })\n                    }\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n","import { tasksReducer } from './tasks-reducer';\nimport { todolistsReducer } from './todolists-reducer';\nimport { combineReducers, createStore } from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todolists: todolistsReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}